{"version":3,"sources":["ListItem.js","App.js","reportWebVitals.js","index.js"],"names":["ListItem","props","List","Item","Checkbox","id","title","defaultChecked","completed","FetchedData","MyMenu","state","activeItem","animation","duration","visible","name","tasklist","apiFetched","handleVisibility","setState","prevState","handleChange","e","value","handleSubmit","length","userId","FetchNow","axios","get","then","response","data","handleItemClick","handleCheckClick","event","newTasklist","map","item","target","this","Menu","stackable","color","inverted","size","as","NavLink","to","active","onClick","position","Grid","columns","Column","textAlign","Button","animated","Content","Icon","hidden","Transition","Group","Segment","centered","Form","onSubmit","Input","placeholder","required","onChange","fitted","path","exact","render","done","backgroundColor","todo","Header","style","overflow","maxHeight","todoElement","paddingTop","Embed","source","filter","task","className","Component","MyHead","bordered","circular","Subheader","Divider","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e712fc0e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { List, Checkbox } from 'semantic-ui-react'\r\n\r\nfunction ListItem(props) {\r\n    return (\r\n        <List.Item >\r\n            <h2>\r\n                <Checkbox id={props.title} defaultChecked={props.completed} />\r\n                {\" \" + props.title}\r\n                \r\n                    \r\n            </h2>\r\n        </List.Item>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import { Segment, Header, Icon, Divider, Grid, Form, List, Embed } from 'semantic-ui-react';\nimport { Menu, Button, Transition } from 'semantic-ui-react';\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, NavLink, Route } from 'react-router-dom';\nimport axios from 'axios';\nimport ListItem from './ListItem'\n\n\nvar FetchedData = []; //global array to store the data fetched from api\n\n\n\nclass MyMenu extends Component {\n\tstate = {\n\t\tactiveItem: 'all', //active item in menu\n\t\tanimation: 'swing down', //animation for form to add task\n\t\tduration: 1000, //animation duration\n\t\tvisible: false, //visibility of form\n\t\t//name of task for tasklist array\n\t\tname: '',\n\t\t//status of task in tasklist array \n\t\t//- true for completed - to show it in green with a checked checkbox and \n\t\t// - false for not completed - shows them in red with the checkbox unchecked\n\t\tcompleted: false,\n\t\t//array to hold all the tasks\n\t\ttasklist: [],\n\t\t//status of api data - fetched (true) or not (false)\n\t\tapiFetched: false\n\t}\n\t//handling visibility of form to add task\n\thandleVisibility = () => {\n\t\tthis.setState((prevState) => ({ visible: !prevState.visible }))\n\t}\n\n\t//handling input change in the form to add task\n\thandleChange = (e, { name, value, completed }) => {\n\t\tthis.setState({\n\t\t\t[name]: value,\n\t\t}, () => {\n\t\t\t// console.log(\"this.state.name: \", this.state.name, \"this.state.completed: \", this.state.completed)\n\t\t\t// \n\t\t})\n\t}\n\n\t//handling submission of the form to add task \n\thandleSubmit = () => {\n\t\tconst { name, completed, tasklist } = this.state\n\t\tthis.setState({\n\t\t\ttasklist: [...tasklist, {\n\t\t\t\tid: tasklist.length + 1,\n\t\t\t\ttitle: name,\n\t\t\t\tcompleted: completed,\n\t\t\t\tuserId: tasklist.length + 1\n\t\t\t}]\n\t\t}\n\t\t\t// , () => {\n\t\t\t//   console.log('from set state', this.state.tasklist);\n\t\t\t//   this.setState({ name: '' })\n\t\t\t// }\n\t\t)\n\t}\n\n\t//to fetch the list of tasks from api\n\tFetchNow = () => {\n\t\tconst url = 'https://jsonplaceholder.typicode.com/todos'\n\t\taxios.get(url)\n\t\t\t.then((response) => {\n\t\t\t\t// console.log(response.data);\n\t\t\t\tFetchedData = response.data;\n\t\t\t\tthis.setState({\n\t\t\t\t\ttasklist: [...this.state.tasklist, ...FetchedData],\n\t\t\t\t\tapiFetched: true\n\t\t\t\t}\n\t\t\t\t\t// , () => {\n\t\t\t\t\t//   console.log(this.state.tasklist);\n\t\t\t\t\t// }\n\t\t\t\t)\n\t\t\t})\n\n\t}\n\t//to navigate among menu items\n\thandleItemClick = (e, { name }) => {\n\t\tthis.setState({\n\t\t\tactiveItem: name\n\t\t})\n\t}\n\n  handleCheckClick = (event) => {\n    // console.log(event.target.id);\n    let newTasklist = this.state.tasklist.map(item => (\n      item.title === event.target.id ? { ...item, completed: !item.completed } : item\n    ));\n    this.setState({\n      tasklist: [...newTasklist]\n    }\n    // , () => {\n    //   console.log(this.state.tasklist)\n    // }\n    );\n    // var currTask = this.state.tasklist.find(obj => {\n    //   return obj.title === event.target.id\n    // })\n    // console.log(currTask);\n\n\t}\n\n\t//to handle the deletion of a task\n\t// handleDelete = (event) => {\n\t// \tvar currTask  = event.target.id;\n\t// \tconsole.log(currTask);\n\t// }\n\n\trender() {\n\t\tconst { activeItem } = this.state;\n\t\tconst { name } = this.state\n\t\treturn (\n\t\t\t//router for ment\n\t\t\t<Router>\n\t\t\t\t<Menu stackable color='teal' inverted size='huge'>\n\t\t\t\t\t<Menu.Item\n\t\t\t\t\t\tas={NavLink} to='/all'\n\t\t\t\t\t\tname='all'\n\t\t\t\t\t\tactive={activeItem === 'all'}\n\t\t\t\t\t\tonClick={this.handleItemClick}\n\t\t\t\t\t/>\n\t\t\t\t\t<Menu.Item\n\t\t\t\t\t\tas={NavLink} to='/finished'\n\t\t\t\t\t\tname='finished'\n\t\t\t\t\t\tactive={activeItem === 'finished'}\n\t\t\t\t\t\tonClick={this.handleItemClick}\n\t\t\t\t\t/>\n\t\t\t\t\t<Menu.Item\n\t\t\t\t\t\tas={NavLink} to='/todo'\n\t\t\t\t\t\tname='todo'\n\t\t\t\t\t\tactive={activeItem === 'todo'}\n\t\t\t\t\t\tonClick={this.handleItemClick}\n\t\t\t\t\t/>\n\t\t\t\t\t<Menu.Item\n\t\t\t\t\t\tas={NavLink} to='/forfun'\n\t\t\t\t\t\tname='have fun'\n\t\t\t\t\t\tactive={activeItem === 'forfun'}\n\t\t\t\t\t\tonClick={this.handleItemClick}\n\t\t\t\t\t\tposition='right'\n\t\t\t\t\t/>\n\t\t\t\t</Menu>\n\t\t\t\t{/* fetch and add row */}\n\t\t\t\t<Grid stackable columns={2}>\n\t\t\t\t\t{/* Button to  show the form, where you can add tasks */}\n\t\t\t\t\t<Grid.Column textAlign='center'>\n\t\t\t\t\t\t<Button animated='fade' color='teal' onClick={this.handleVisibility}>\n\t\t\t\t\t\t\t<Button.Content visible>\n\t\t\t\t\t\t\t\t<Icon name='add circle' />\n\t\t\t\t\t\t\t</Button.Content>\n\t\t\t\t\t\t\t<Button.Content hidden>Add task</Button.Content>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t{/* Button to fetch the tasks from api and display them on here */}\n\t\t\t\t\t<Grid.Column textAlign='center'>\n\t\t\t\t\t\t<Button animated='fade' color='teal' onClick={this.FetchNow} id=\"fetchButton\">\n\t\t\t\t\t\t\t<Button.Content visible>\n\t\t\t\t\t\t\t\t<Icon name='arrow circle down' />\n\t\t\t\t\t\t\t</Button.Content>\n\t\t\t\t\t\t\t<Button.Content hidden>Fetch</Button.Content>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t</Grid>\n\t\t\t\t{/* Animation of form appearing and disappearing , taking the task name to add */}\n\t\t\t\t<Transition.Group animation={this.state.animation} duration={this.state.duration}>\n\t\t\t\t\t{this.state.visible && (\n\t\t\t\t\t\t<div id='formhere'>\n\t\t\t\t\t\t\t{/* <Segment > */}<Segment>\n\t\t\t\t\t\t\t\t<Grid centered>\n\t\t\t\t\t\t\t\t\t<Form id='formhere' onSubmit={this.handleSubmit}>\n\t\t\t\t\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t\t\t\t\t\t<Form.Input\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Task Name'\n\t\t\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t\t\t\tname='name'\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\t\t\t\t\t\tcolor='teal'\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<Form.Button color='teal'>\n\t\t\t\t\t\t\t\t\t\t\t\t<Icon name='check circle' fitted />\n\t\t\t\t\t\t\t\t\t\t\t</Form.Button>\n\t\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t\t</Form></Grid>\n\t\t\t\t\t\t\t</Segment>\n\t\t\t\t\t\t\t{/* </Segment> */}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</Transition.Group>\n\n\t\t\t\t{/* Declaring routes for menu items */}\n\t\t\t\t<Route \n\t\t\t\t\t// Menu Item that displays all tasks\n\t\t\t\t\tpath='/all'\n\t\t\t\t\texact\n\t\t\t\t\trender={() => {\n\t\t\t\t\t\t// Style class for tasks that are completed\n\t\t\t\t\t\tconst done = {\n\t\t\t\t\t\t\tbackgroundColor: \"lightgreen\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Style class for tasks that are to be done\n\t\t\t\t\t\tconst todo = {\n\t\t\t\t\t\t\tbackgroundColor: \"tomato\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// JSX\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Header as='h1'>All Tasks</Header>\n\t\t\t\t\t\t\t\t<List size='huge' style={{ overflow: 'auto', maxHeight: 700 }}>\n\t\t\t\t\t\t\t\t\t{this.state.tasklist.map((todoElement) => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Segment key={todoElement.title} style={todoElement.completed === true ? done : todo} onChange={this.handleCheckClick}>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t<ListItem  title={todoElement.title} completed={todoElement.completed} />\n\t\t\t\t\t\t\t\t\t\t\t</Segment>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<Route\n\t\t\t\t\tpath='/forfun'\n\t\t\t\t\texact\n\t\t\t\t\trender={() => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div style={{ paddingTop: 20 }}>\n\t\t\t\t\t\t\t\t<Segment inverted>\n\t\t\t\t\t\t\t\t\t<Header>Ever heard of the procrastinator monkey?</Header>\n\t\t\t\t\t\t\t\t\t<Embed\n\t\t\t\t\t\t\t\t\t\tid='arj7oStGLkU'\n\t\t\t\t\t\t\t\t\t\tplaceholder='https://hygger.io/wp-content/uploads/2019/02/4.png'\n\t\t\t\t\t\t\t\t\t\tsource='youtube'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Segment>\n\t\t\t\t\t\t\t\t<Segment inverted>\n\t\t\t\t\t\t\t\t\t<Header>Netflix? Now we're talking!</Header>\n\t\t\t\t\t\t\t\t\t<Embed\n\t\t\t\t\t\t\t\t\t\tid='KchhsRpocYc'\n\t\t\t\t\t\t\t\t\t\tplaceholder='https://hygger.io/wp-content/uploads/2019/02/4.png'\n\t\t\t\t\t\t\t\t\t\tsource='youtube'\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t</Segment>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<Route\n\t\t\t\t\tpath='/finished'\n\t\t\t\t\texact\n\t\t\t\t\trender={() => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Header as='h1'>Finished Tasks</Header>\n\t\t\t\t\t\t\t\t<List size='huge' style={{ overflow: 'auto', maxHeight: 700 }}>\n\t\t\t\t\t\t\t\t\t{this.state.tasklist.filter(task => (task.completed === true)).map((todoElement) => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Segment key={todoElement.title} style={{ backgroundColor: \"lightgreen\" }}  onChange={this.handleCheckClick}>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListItem  title={todoElement.title} completed={todoElement.completed} />\n\t\t\t\t\t\t\t\t\t\t\t</Segment>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<Route\n\t\t\t\t\tpath='/todo'\n\t\t\t\t\texact\n\t\t\t\t\trender={() => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Header as='h1'>Tasks to do...</Header>\n\t\t\t\t\t\t\t\t<List size='huge' style={{ overflow: 'auto', maxHeight: 700 }}>\n\t\t\t\t\t\t\t\t\t{this.state.tasklist.filter(task => (task.completed === false)).map((todoElement) => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Segment key={todoElement.title} style={{ backgroundColor: \"tomato\" }} className=\"atask\" onChange={this.handleCheckClick}>\n\t\t\t\t\t\t\t\t\t\t\t\t<ListItem  title={todoElement.title} completed={todoElement.completed} />\n\t\t\t\t\t\t\t\t\t\t\t</Segment>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\n\nclass MyHead extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='ui very raised padded text three column container segment' id=\"top\">\n\t\t\t\t<Segment>\n\t\t\t\t\t<Header as='h1' size='huge'>\n\t\t\t\t\t\t<Icon bordered inverted circular color='teal' name='hand peace outline' />\n\t\t\t\t\t\t<Header.Content>Task Manager\n            <Header.Subheader>Procrastinate. We're here to see that you do\n              <Icon name=\"smile outline\">\n\t\t\t\t\t\t\t\t</Icon>\n\t\t\t\t\t\t\t</Header.Subheader>\n\t\t\t\t\t\t</Header.Content>\n\t\t\t\t\t</Header>\n\t\t\t\t\t<Divider />\n\n\t\t\t\t</Segment>\n\t\t\t\t<MyMenu />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nclass App extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<MyHead />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}